<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hank&#39;s Blog</title>
    <link>http://zhengyhn.github.io/</link>
    <description>Recent content on Hank&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://zhengyhn.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>battelships-in-a-board</title>
      <link>http://zhengyhn.github.io/post/leetcode/battelships-in-a-board/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/leetcode/battelships-in-a-board/</guid>
      <description>题目 Given an 2D board, count how many battleships are in it. The battleships are represented with &#39;X&#39;s, empty slots are represented with &#39;.&#39;s. You may assume the following rules: You receive a valid board, made of only battleships or empty slots. Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N</description>
    </item>
    
    <item>
      <title>find-all-duplicates-in-an-array</title>
      <link>http://zhengyhn.github.io/post/leetcode/find-all-duplicates-in-an-array/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/leetcode/find-all-duplicates-in-an-array/</guid>
      <description>题目 Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once. Find all the elements that appear twice in this array. Could you do it without extra space and in O(n) runtime? Example: Input: [4,3,2,7,8,2,3,1] Output: [2,3] 思路 想了好久，终于想出来了。首先，题目</description>
    </item>
    
    <item>
      <title>array-partition-i</title>
      <link>http://zhengyhn.github.io/post/leetcode/array-partition-i/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/leetcode/array-partition-i/</guid>
      <description>题目 Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible. Note: n is a positive integer, which is in the range of [1, 10000]. All the integers in the array will be in the range</description>
    </item>
    
    <item>
      <title>merge-two-binary-trees 合并二叉树</title>
      <link>http://zhengyhn.github.io/post/leetcode/merge-two-binary-trees/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/leetcode/merge-two-binary-trees/</guid>
      <description>题目 Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will</description>
    </item>
    
    <item>
      <title>maxiumn-subarray 和最大的子数组</title>
      <link>http://zhengyhn.github.io/post/leetcode/maxiumn-subarray/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/leetcode/maxiumn-subarray/</guid>
      <description>题目 Find the contiguous subarray within an array (containing at least one number) which has the largest sum. For example, given the array [-2, 1, -3, 4, -1, 2, 1, -5, 4], the contiguous subarray [4, -1, 2, 1] has the largest sum = 6. 思路一 首先，可以直接两重循环，找到所有的子数组，</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://zhengyhn.github.io/about/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/about/</guid>
      <description>I am Hank.</description>
    </item>
    
    <item>
      <title>浅谈后端业务系统设计</title>
      <link>http://zhengyhn.github.io/post/design-guide/</link>
      <pubDate>Fri, 31 Mar 2017 10:50:49 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/design-guide/</guid>
      <description>这里将说说个人对设计的想法，必然会有争议之处，内容包括系统之间设计，系统内部模块之间设计，细到每个函数的设计。 系统设计 不要为了拆系统而拆系统</description>
    </item>
    
    <item>
      <title>记一次redis连接数超限的事故</title>
      <link>http://zhengyhn.github.io/post/redis-max-client-limit/</link>
      <pubDate>Thu, 30 Mar 2017 22:50:49 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/redis-max-client-limit/</guid>
      <description>最近出了一次事故，应用crash，并报错: max number of clients reached. 查了一下reids的连接： netstat -anp |grep 6379 | wc -l 发现，连接数达10000多个，大致扫了一下，发现</description>
    </item>
    
    <item>
      <title>如何在Sails.js中使用generator</title>
      <link>http://zhengyhn.github.io/post/how-to-use-generator-in-sails/</link>
      <pubDate>Mon, 13 Mar 2017 22:50:49 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/how-to-use-generator-in-sails/</guid>
      <description>由于历史原因，公司的App项目用Sails.js框架来开发，那时候还没有ES6，当然是一层一层callback下去，后来引进了Async和T</description>
    </item>
    
    <item>
      <title>c plus plus interview review</title>
      <link>http://zhengyhn.github.io/post/cpp/c-plus-plus-interview-review/</link>
      <pubDate>Fri, 27 May 2016 20:50:49 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/c-plus-plus-interview-review/</guid>
      <description>这是我看了《C笔试面试宝典》一书的笔记 new, delete, malloc, free的关系 new和delete是C++的 运算符 ，new调用构造函数，delete调用析构函数</description>
    </item>
    
    <item>
      <title>improve code readability</title>
      <link>http://zhengyhn.github.io/post/improve-code-readability/</link>
      <pubDate>Fri, 27 May 2016 20:40:43 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/improve-code-readability/</guid>
      <description>这是我读 &amp;ldquo;the art of readable code&amp;rdquo; 一书做的笔记 简化循环和逻辑 making control flow easy to read 下面的代码: if (length &amp;gt;= 10) 要比: if (10 &amp;lt;= length) 更容易看懂。这是很显然的。而在C语言中，有的人为了</description>
    </item>
    
    <item>
      <title>reStructuredText语法笔记</title>
      <link>http://zhengyhn.github.io/post/write-down-the-restructuredtext-syntax-i-frequently-use/</link>
      <pubDate>Fri, 27 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/write-down-the-restructuredtext-syntax-i-frequently-use/</guid>
      <description>reStructuredText用于排版非常好。但是，和C++一样，越是灵活，越是可扩展，越是复杂。 有些语法，你永远记不住，我经常遇到一些表</description>
    </item>
    
    <item>
      <title>A tour to The Badaling Great Wall</title>
      <link>http://zhengyhn.github.io/post/2013-08-03-a-tour-to-the-badaling-great-wall/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/2013-08-03-a-tour-to-the-badaling-great-wall/</guid>
      <description>Today, I went to the Badaling Great Wall alone.
There is a saying that He who has never been to the Great Wall is not a true man.
I had read this saying for many times when I was in high school, but I have never been to the Great Wall util today.
I got up at 7:00am and began my tour at about 7:40am after the breakfast. It took me 30 minutes to arrive at Xi zhi men station from where I live.</description>
    </item>
    
    <item>
      <title>About Constructors Destructors and Assignment Operators</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-07-28-about-constructors-destructors-and-assignment-operators/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-07-28-about-constructors-destructors-and-assignment-operators/</guid>
      <description>What functions C++ will silently write and call? If we declare an empty class, the compiler will declare a constructor, a copy constructor, a copy assignment operator and a destructor for us.
class Girl { };  But the compiler is not foolish, it will only generate them when needed.
What do the generated functions do?
 For construtor, it will invoke the corresponding constructor and non-static members of its base class.</description>
    </item>
    
    <item>
      <title>Always pass parameters by reference-to-const</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-08-09-always-pass-parameters-by-reference-to-const/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-08-09-always-pass-parameters-by-reference-to-const/</guid>
      <description>We all know that pass by value is not effecient.So we use pass by pointer in C.However, in C++, we prefer pass by referece-to-const.
Here is an example.
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; class Dog { public: Dog() { printf(&amp;quot;Calling Dog&#39;s constructor\n&amp;quot;); } Dog(const Dog&amp;amp; d) { printf(&amp;quot;Calling Dog&#39;s copy constructor\n&amp;quot;); this-&amp;gt;name = d.name; } virtual ~Dog() { printf(&amp;quot;Calling Dog&#39;s destructor\n&amp;quot;); } private: std::string name; }; void walk_the_dog(Dog d) { } int main(int argc, char **argv) { Dog dog; walk_the_dog(dog); return 0; }  The running result is as follows:</description>
    </item>
    
    <item>
      <title>Const anyway!</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-07-24-const-anyway/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-07-24-const-anyway/</guid>
      <description>Const pointer const is versatile.I am always confused by the following syntax.
const char *str = &amp;quot;Hello&amp;quot;; // const data, non-const pointer char * const str = &amp;quot;Hello&amp;quot;; // const pointer, non-const data  Now there is a tip to remember it.
If const appears to the right of the asterisk, the pointer is constant.If const appears to the left of the asterisk, the data is constant.
So the following two statements are the same.</description>
    </item>
    
    <item>
      <title>Cpp Resource Management</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-08-01-cpp-resource-management/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-08-01-cpp-resource-management/</guid>
      <description>I always forget freeing a memory that allocated from the heap.And I always forget closing the file handler.
Resources include file descriptors, mutex locks, fonts, brushes, database connections and network sockets.
I think less programmers can remember closing a file handler, especially in a large project.
Nowadays, many programming languages have the garbage collection function. In C++, since the destructor will be automatically called, we can release the resources automatically if we put the resource into an object.</description>
    </item>
    
    <item>
      <title>Do not hide inherited names</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-08-15-do-not-hide-inherited-names/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-08-15-do-not-hide-inherited-names/</guid>
      <description>In inheritance, there are some rules defined by C++, one of which is that the virables or the functions in the base class will be hidden if there are virables and functions with the same name.
It seems perfect, but it&amp;rsquo;s a pitfall of C++. Consider the following example.
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;iostream&amp;gt; class Person { public: explicit Person() { } ~Person() { } void sleep() const { printf(&amp;quot;Person sleep\n&amp;quot;); } void sleep(const int sec) const { printf(&amp;quot;Person sleep %d s\n&amp;quot;, sec); } private: Person(const Person&amp;amp;); const Person&amp;amp; operator=(const Person&amp;amp;); }; class Student:public Person { public: explicit Student() { } ~Person() { } void sleep() const { printf(&amp;quot;Student sleep\n&amp;quot;); } private: Student(const Student&amp;amp;); const Student&amp;amp; operator=(const Student&amp;amp;); }; int main(int argc, char **argv) { Student stu; stu.</description>
    </item>
    
    <item>
      <title>Implement a bidirectional linked list</title>
      <link>http://zhengyhn.github.io/post/datastructure/2013-09-21-implement-a-bidirectional-linked-list/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/datastructure/2013-09-21-implement-a-bidirectional-linked-list/</guid>
      <description>A bidirectional linked list is the same as a singular linked list except that there are two links between two nodes.
Here is the specification of my BiLinkedList.
 BiLinkedList(), Create an empty BiLinkedList. BiLinkedList(const BiLinkedList&amp;amp; list), Create a BiLinkedList from another BiLinkedList list. BiLinkedList(const T&amp;amp; value), Create a BiLinkedList whose first element is value. BiLinkedList(const T values[], size_t size), Create a BiLinkedList from an array values of size size. const BiLinkedList&amp;amp; operator=(const BiLinkedList&amp;amp; list), Support BiLinkedList assignment.</description>
    </item>
    
    <item>
      <title>Implement a binary search tree</title>
      <link>http://zhengyhn.github.io/post/datastructure/2013-10-03-implement-a-binary-search-tree/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/datastructure/2013-10-03-implement-a-binary-search-tree/</guid>
      <description>A binary search tree is very useful in solving the real world problems. The red-black tree is one kind of binary search tree. For more information about binary search tree, please visit the wikipedia.
Here is the specification of my binary search tree.
 BinarySearchTree(), Create an empty binary search tree.
 BinarySearchTree(const T&amp;amp; root_val), Create an binary search tree whose root node is constructed from root_val.
 BinarySearchTree(const T values[], const size_t&amp;amp; size), Create an binary search tree from an array values.</description>
    </item>
    
    <item>
      <title>Implement a circular linked list</title>
      <link>http://zhengyhn.github.io/post/datastructure/2013-09-21-implement-a-circular-linked-list/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/datastructure/2013-09-21-implement-a-circular-linked-list/</guid>
      <description>A circular linked list is the same as a singular linked list except that there last node points to the first node.
Here is the specification of my CiLinkedList.
 CiLinkedList(), Create an empty CiLinkedList. CiLinkedList(const CiLinkedList&amp;amp; list), Create a CiLinkedList from another CiLinkedList list. CiLinkedList(const T&amp;amp; value), Create a CiLinkedList whose first element is value. CiLinkedList(const T values[], size_t size), Create a CiLinkedList from an array values of size size.</description>
    </item>
    
    <item>
      <title>Implement a queue</title>
      <link>http://zhengyhn.github.io/post/datastructure/2013-09-25-implement-a-queue/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/datastructure/2013-09-25-implement-a-queue/</guid>
      <description>A queue is based on the Linked List. The most explicit feature of a queue is FIFO(First in first out).
Here is the specification of my Queue.
 Queue(), Create an empty queue. Queue(const T&amp;amp; value), Create a queue whose first element is value. Queue(const T values[], const size_t&amp;amp; size), Create a queue from an array values whose size is size. Queue(const Queue&amp;lt;T&amp;gt;&amp;amp; queue), Create a queue from another queue. const Queue&amp;lt;T&amp;gt;&amp;amp; operator=(const Queue&amp;lt;T&amp;gt;&amp;amp; queue), Support queue assignment.</description>
    </item>
    
    <item>
      <title>Implement a queue using two stacks</title>
      <link>http://zhengyhn.github.io/post/datastructure/2013-09-27-implement-a-queue-using-two-stacks/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/datastructure/2013-09-27-implement-a-queue-using-two-stacks/</guid>
      <description>A queue can be implemented using two stacks. One stack store the elements appended to the queue. The other stack store the elements to be popped from the queue.
Here is the specification of my Queue.
 StQueue(), Create an empty queue. StQueue(const T&amp;amp; value), Create a queue whose first element is value. StQueue(const T values[], const size_t&amp;amp; size), Create a queue from an array values whose size is size. StQueue(const StQueue&amp;lt;T&amp;gt;&amp;amp; queue), Create a queue from another queue.</description>
    </item>
    
    <item>
      <title>Implement a singular LinkedList</title>
      <link>http://zhengyhn.github.io/post/datastructure/2013-09-12-implement-a-singular-linkedlist/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/datastructure/2013-09-12-implement-a-singular-linkedlist/</guid>
      <description>LinkedList is a very common data structure. Three years ago, I could write a singular LinkedList very quickly in C/C++. But the code is ugly and very ineffecient. Now I am going to implement a singular LinkedList in C++ in order to cracking the interview.
Here is the specification of my LinkedList.
 LinkedList(), Create an empty LinkedList. LinkedList(const LinkedList&amp;amp; list), Create a LinkedList from another LinkedList list. LinkedList(const T&amp;amp; value), Create a LinkedList whose first element is value.</description>
    </item>
    
    <item>
      <title>Implement a stack</title>
      <link>http://zhengyhn.github.io/post/datastructure/2013-09-26-implement-a-stack/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/datastructure/2013-09-26-implement-a-stack/</guid>
      <description>A stack is based on the Linked List. The most explicit feature of a stack is FILO(First in last out).
Here is the specification of my Stack.
 Stack(), Create an empty stack. Stack(const T&amp;amp; value), Create a stack whose first element is value. Stack(const T values[], const size_t&amp;amp; size), Create a stack from an array values whose size is size. Stack(const Stack&amp;lt;T&amp;gt;&amp;amp; stack), Create a stack from another stack. const Stack&amp;lt;T&amp;gt;&amp;amp; operator=(const Stack&amp;lt;T&amp;gt;&amp;amp; stack), Support stack assignment.</description>
    </item>
    
    <item>
      <title>Implement the sorting algorithms</title>
      <link>http://zhengyhn.github.io/post/datastructure/2013-09-26-implement-the-sorting-algorithms/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/datastructure/2013-09-26-implement-the-sorting-algorithms/</guid>
      <description>The sorting algorithms are very important in programming interview. I have to be able to write them on a paper without even an error.
Bubble Sort The immediate thought of bubble sort is that swapping the ajacent elements if they are of the wrong order in each pass until there are no swapping. For example, consider the array [5, 1, 4, 2, 8],
First pass:
[5, 1, 4, 2, 8] =&amp;gt; [1, 5, 4, 2, 8] =&amp;gt; [1, 4, 5, 2, 8] =&amp;gt; [1, 4, 2, 5, 8] =&amp;gt; [1, 4, 2, 5, 8]</description>
    </item>
    
    <item>
      <title>Initialized before used</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-07-26-initialized-before-used/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-07-26-initialized-before-used/</guid>
      <description>For constructor In the constructor, the statements in the body are assignments, not initializations.
#include &amp;lt;iostream&amp;gt; class Girl { public: Girl(std::string name, int age) { name_ = name; // These are assignments, not initilizations. age_ = age; } private: std::string name_; int age_; };  If you do this, the program will be very slow.When calling the constructor, the program will call the default construtors to initialize the members, and then enter the body of the constructor.</description>
    </item>
    
    <item>
      <title>More consts enums inlines and less #defines</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-07-23-more-consts-enums-inlines-and-less-defines/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-07-23-more-consts-enums-inlines-and-less-defines/</guid>
      <description>This is an old topic.
For constants Consider a macro below.
#define PI 3.14  There are several drawbacks when using a macro.
 It&amp;rsquo;s hard to debug.As we all know, the macros are resolved by the preprocessor and the compiler know nothing about them.When you get an error when compiling the program, the error message may refer to 3.14 but not PI because PI is not in the symbol table.</description>
    </item>
    
    <item>
      <title>My C&#43;&#43; coding style</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-09-25-my-c-plus-plus-coding-style/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-09-25-my-c-plus-plus-coding-style/</guid>
      <description>Every programmer has his/her own coding style. Time goes by, and my coding style is changing. There following is my note on c++ coding style. I will explain why I want to coding in that style.
Why do I care about my coding style so much? Because I am a virgo.
 Always add a m_ prefix to the members and use this to refer to other member functions in the member function.</description>
    </item>
    
    <item>
      <title>Postponing definitions instead of preponing</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-08-11-postponing-definitions-instead-of-preponing/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-08-11-postponing-definitions-instead-of-preponing/</guid>
      <description>Prepone definitions? Wrong! Before C99, you must prepone all the variables&amp;rsquo; definitions before any statements. But after C99 was released, you can put a variable&amp;rsquo;s definition in any place as long as before being used. I think this new feature is introduced by learning from C++.
This makes programer write codes more convenient. But I used to insist the old style. I even teach my students that they should use the old style when I was a TA of the course Programming with C.</description>
    </item>
    
    <item>
      <title>Ruby-getting started</title>
      <link>http://zhengyhn.github.io/post/2013-06-30-ruby-getting-started/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/2013-06-30-ruby-getting-started/</guid>
      <description>Running ruby Interactive In the past, I always tested some ruby statements with irb. Now I can test a small ruby program in the following way.
[monkey@itlodge octopress]$ ruby str = &amp;quot;abc&amp;quot; puts str Ctrl+d abc  After hit ruby, it allows me to type as many code as possible.Finally, press Ctrl+d will end the input and it will evaluate the code.
Programs When writing a script, we always use #!</description>
    </item>
    
    <item>
      <title>Some basic Ruby</title>
      <link>http://zhengyhn.github.io/post/2013-07-25-some-basic-ruby/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/2013-07-25-some-basic-ruby/</guid>
      <description>String and name When defining a function, the parentheses are not necessary.So this one
def say_hello name &amp;quot;Hello &amp;quot; + name end puts say_hello &amp;quot;man&amp;quot;  is the same as this.
def say_hello(name) &amp;quot;Hello &amp;quot; + name end puts(say_hello(&amp;quot;man&amp;quot;))  However, when there are more than one parameters, it will be difficult to know which argument goes with which method invocation.So it&amp;rsquo;s recommended using parentheses in all but the simplest cases.</description>
    </item>
    
    <item>
      <title>Some interview questions about array and string</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-08-25-some-interview-questions-about-array-and-string/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-08-25-some-interview-questions-about-array-and-string/</guid>
      <description>Hash Table In C++, the namespacestd::tr1 contains lots of hash tables. We can play with it.
{% include_code careerup-array/careerup-hash.cpp %}
Questions 1.1. Implement an algorithm to determine if a string has all unique characters. What if you can not use additional data structures?
I have come up with 2 methods.
 Iterate the string and compare each character to other character. This is the common way to solve this problem.</description>
    </item>
    
    <item>
      <title>Some reviews about C plus plus</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-07-22-some-reviews-about-c-plus-plus/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-07-22-some-reviews-about-c-plus-plus/</guid>
      <description>Declaration and Definition I have already known the difference between declaration and definion, but now I find that my understanding is not complete.
Declaration just tells the compiler about the name and the type of something.It&amp;rsquo;s very common about the declaration of objects and functions.
extern int a; int max(int a, int b);  However, I never think about the declaration of class.Recently, I have to view some codes in a large project and I have found many of these declarations.</description>
    </item>
    
    <item>
      <title>Understanding Encapsulation</title>
      <link>http://zhengyhn.github.io/post/cpp/2013-08-09-understanding-encapsulation/</link>
      <pubDate>Sat, 14 May 2016 16:35:19 +0800</pubDate>
      
      <guid>http://zhengyhn.github.io/post/cpp/2013-08-09-understanding-encapsulation/</guid>
      <description>Once I loved C very much and I thought it&amp;rsquo;s the best programming language in the world. I used to argue that C can be used to implement the object-oriented design with struct. I used to argue that private and public is useless in C++. However, now I know I was wrong.
Why we need private It&amp;rsquo;s related to a very important concept in C++, that is, encapsulation.
Encapsulation is not invisibility.</description>
    </item>
    
    <item>
      <title>elisp笔记：introduction</title>
      <link>http://zhengyhn.github.io/post/elisp/data_type/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/elisp/data_type/</guid>
      <description>lisp历史 原来lisp是list processing language,1950s后期推出，主要为了研究人工智能。 数据类型 概述 每个对象至少属于一种类型 对于打印</description>
    </item>
    
    <item>
      <title>elisp笔记：运算</title>
      <link>http://zhengyhn.github.io/post/elisp/arithmetic/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/elisp/arithmetic/</guid>
      <description>声明：此文章为学习xahlee 的elisp教程 而写的笔记。 数学计算基础 运算符也是函数 和其它函数式语言一样，elisp中，加减乘除也是一个函数</description>
    </item>
    
    <item>
      <title>shell 编程！</title>
      <link>http://zhengyhn.github.io/post/shell/getting.start/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/shell/getting.start/</guid>
      <description>引言 我非常欣赏这句话。 没有完美的编程语言。没有最好的语言，只有最合适或最不合适的语言。 &amp;ndash;Herbert Mayer 写脚本 我之前也写过一点点的bash shell，完全</description>
    </item>
    
    <item>
      <title>shell基础知识</title>
      <link>http://zhengyhn.github.io/post/shell/basics/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/shell/basics/</guid>
      <description>特殊字符 # 在双引号和单引号里面的#不会被认为是注释开始，经\转义的#不会认为是注释开始。 echo &amp;quot;#这里不是注释&amp;quot; echo &#39;#这里不</description>
    </item>
    
    <item>
      <title>KMP算法-我的理解</title>
      <link>http://zhengyhn.github.io/post/algorithm/kmp/</link>
      <pubDate>Wed, 24 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/algorithm/kmp/</guid>
      <description>动机 在被各大公司的笔试面试给鄙视之后，我要开始努力了。看了一本叫做 《C/C++面试题》的电子书，里面提到找子字符串的算法，最好的是KMP， 于</description>
    </item>
    
    <item>
      <title>程序员面试宝典读书笔记</title>
      <link>http://zhengyhn.github.io/post/programmer_interview/</link>
      <pubDate>Wed, 24 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/programmer_interview/</guid>
      <description>C/C++程序设计 浮点数的存储 有下面的代码： #include &amp;lt;stdio.h&amp;gt; int main(int argc, char *argv[]) { int a; float *b = (float *)&amp;amp;a; *b = 13.0f; printf(&amp;quot;%d\n&amp;quot;, a); printf(&amp;quot;%#x\n&amp;quot;, a); return 0; } 最后的输出会是多少呢？ 答案是： 1095761920 0x41500000 涉及到IEE</description>
    </item>
    
    <item>
      <title>复习C/C&#43;&#43;</title>
      <link>http://zhengyhn.github.io/post/clang/exam/</link>
      <pubDate>Sat, 20 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/exam/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为《C笔试面试宝典》一书的笔记 @&amp;lt;/font&amp;gt; new, delete, malloc, free的关系 new和delete是C++的运算符，new调用构造函数，delete调用析构函</description>
    </item>
    
    <item>
      <title>项目管理与信息技术环境</title>
      <link>http://zhengyhn.github.io/post/pm/env.org/</link>
      <pubDate>Mon, 01 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/pm/env.org/</guid>
      <description>系统观点 高层管理者和项目经理必须遵循系统哲学，使用系统分析的方法来满足解决问题的需要。 系统管理的三维模型：业务，组织，技术。 组织 项目经理应该</description>
    </item>
    
    <item>
      <title>linux系统初识</title>
      <link>http://zhengyhn.github.io/post/linux/intuition.org/</link>
      <pubDate>Thu, 28 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/linux/intuition.org/</guid>
      <description>常识 当命令太长时，可以使用反斜杠\来防止按RET执行命令，能在下一行继续输入 可以用分号;来分隔命令，因为可以在同一行输入多个命令 显示日历：c</description>
    </item>
    
    <item>
      <title>learn python the hard way笔记</title>
      <link>http://zhengyhn.github.io/post/python/python.org/</link>
      <pubDate>Mon, 25 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/python/python.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;learn python the hard way&amp;rdquo;一书的笔记 @&amp;lt;/font&amp;gt; 方法 在python交互窗口中，打help()，会进入帮助模式，这里可</description>
    </item>
    
    <item>
      <title>鸟哥的linux私房菜笔记：linux是什么&amp;主机规划</title>
      <link>http://zhengyhn.github.io/post/linux/linux.org/</link>
      <pubDate>Fri, 22 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/linux/linux.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;鸟哥的linux私房菜基础学习篇(第三版)&amp;ldquo;一书的笔记 @&amp;lt;/font&amp;gt; 概念 原来BSD是指Berkeley Software Distribution. System V是AT</description>
    </item>
    
    <item>
      <title>鸟哥的linux私房菜笔记：计算机概论</title>
      <link>http://zhengyhn.github.io/post/linux/computer.org/</link>
      <pubDate>Thu, 21 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/linux/computer.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;鸟哥的linux私房菜基础学习篇(第三版)&amp;ldquo;一书的笔记 @&amp;lt;/font&amp;gt; 计算机常识 原来Eeepc就是现在所说的上网本ne</description>
    </item>
    
    <item>
      <title>一个带颜色输出的echo</title>
      <link>http://zhengyhn.github.io/post/echoc/</link>
      <pubDate>Wed, 20 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/echoc/</guid>
      <description>动机 为了找到工作，最近需要多写shell了，有时候我很想输出信息的时候有颜色，比如 成功的信息用绿色，错误的信息用红色，去查了一下echo，发</description>
    </item>
    
    <item>
      <title>带上X光眼镜测试软件</title>
      <link>http://zhengyhn.github.io/post/test/x_ray.org/</link>
      <pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/test/x_ray.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;software testing&amp;rdquo;一书的读书笔记 @&amp;lt;/font&amp;gt; 动态白盒测试 显然，动态即要运行，白盒即要看到代码。dyn</description>
    </item>
    
    <item>
      <title>检查代码</title>
      <link>http://zhengyhn.github.io/post/test/exam_code.org/</link>
      <pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/test/exam_code.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;software testing&amp;rdquo;一书的读书笔记 @&amp;lt;/font&amp;gt; 静态白盒测试：检查设计和代码 formal review 这个过程有4个方面要做：</description>
    </item>
    
    <item>
      <title>配置测试与兼容性测试</title>
      <link>http://zhengyhn.github.io/post/test/config_comp.org/</link>
      <pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/test/config_comp.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;software testing&amp;rdquo;一书的读书笔记 @&amp;lt;/font&amp;gt; 配置测试 其实是有关硬件的测试。需要测试的内容： PC类型（</description>
    </item>
    
    <item>
      <title>数字的算法</title>
      <link>http://zhengyhn.github.io/post/algorithm/number/</link>
      <pubDate>Wed, 13 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/algorithm/number/</guid>
      <description>基本代数 加法 十进制有一个很傻逼但是很有趣的性质： 任意3个个位数相加的和最多是两位数 事实上，对于任意进制，都有这个性质。 另外一个很有用的性质：</description>
    </item>
    
    <item>
      <title>简介</title>
      <link>http://zhengyhn.github.io/post/pm/intro.org/</link>
      <pubDate>Wed, 13 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/pm/intro.org/</guid>
      <description>项目 什么是项目 一个项目，就是为了创造一个独特的产品、服务或结果的临时性努力。 A project is a temporary endeavor undertaken to create a unique product, service or result. 而IT项目则是使用硬件、软件或网络</description>
    </item>
    
    <item>
      <title>比较高效的整数求幂法</title>
      <link>http://zhengyhn.github.io/post/algorithm/quick.exp/</link>
      <pubDate>Mon, 11 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/algorithm/quick.exp/</guid>
      <description>最近在看快速求fibonaci数列的方法，需要用到快速求幂法，于是参考了这篇文章 ， 做下笔记。 最直观的方法 如果叫我求一个整数的n次幂，我要么用</description>
    </item>
    
    <item>
      <title>高阶函数</title>
      <link>http://zhengyhn.github.io/post/haskell/high.order.function.org/</link>
      <pubDate>Mon, 11 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/haskell/high.order.function.org/</guid>
      <description>curried function 我还是直接翻译成“用咖啡煮的函数吧”。 有一个有趣的现象： Prelude&amp;gt; max 1 2 2 Prelude&amp;gt; (max 1) 2 2 我刚开始觉得这太不可思议了，max 1居然可以执行，而且它的返</description>
    </item>
    
    <item>
      <title>tcpl读书笔记：函数与程序结构化</title>
      <link>http://zhengyhn.github.io/post/clang/function.org/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/function.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为the c programming language一书的笔记 @&amp;lt;/font&amp;gt; exercise 4-2 扩展atof函数，支持科学计数法。下面是我写的代码，未完全测试正确。 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;math.h&amp;gt; int isBlank(char c) {</description>
    </item>
    
    <item>
      <title>tcpl读书笔记：指针和数组</title>
      <link>http://zhengyhn.github.io/post/clang/pointer_array.org/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/pointer_array.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为the c programming language一书的笔记 @&amp;lt;/font&amp;gt; 多维数组 对于一个二维数组，如果要作为函数参数来传递，必须要包含列数，行数可加可不加。 因为，传</description>
    </item>
    
    <item>
      <title>tcpl读书笔记：简介与基础</title>
      <link>http://zhengyhn.github.io/post/clang/introduction.org/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/introduction.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为the c programming language一书的笔记 @&amp;lt;/font&amp;gt; 铭记c语言之父 不要忘记他们的名字，也不要写错他们的名字，他们是： Brian W. Kernighan Dennis M. Ritchie 简介 历史 c语言受</description>
    </item>
    
    <item>
      <title>tcpl读书笔记：类型与表达式</title>
      <link>http://zhengyhn.github.io/post/clang/type_op_exp.org/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/type_op_exp.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为the c programming language一书的笔记 @&amp;lt;/font&amp;gt; 数据类型和大小 有关short,int,long的大小。 它们的大小由编译器决定，但是有一个规定</description>
    </item>
    
    <item>
      <title>tcpl读书笔记：结构体</title>
      <link>http://zhengyhn.github.io/post/clang/structure.org/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/structure.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为the c programming language一书的笔记 @&amp;lt;/font&amp;gt; 基础 原来可以这样初始化： struct point { int x; int y; }; struct maxpt = { 300, 200 }; 这样就定义了一个坐标为(300, 200</description>
    </item>
    
    <item>
      <title>tcpl读书笔记：输入和输出</title>
      <link>http://zhengyhn.github.io/post/clang/io.org/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/io.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为the c programming language一书的笔记 @&amp;lt;/font&amp;gt; 错误处理——stderr and exit 为什么要有stderr呢？ 当我们用到屏幕的时候，如果出错了，可以</description>
    </item>
    
    <item>
      <title>带上眼罩测试软件</title>
      <link>http://zhengyhn.github.io/post/test/blinder.org/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/test/blinder.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;software testing&amp;rdquo;一书的读书笔记 @&amp;lt;/font&amp;gt; 动态黑盒测试 动态，因为运行程序来测试。黑盒，因为看不到代</description>
    </item>
    
    <item>
      <title>递归</title>
      <link>http://zhengyhn.github.io/post/haskell/recursion.org/</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/haskell/recursion.org/</guid>
      <description>一些基本的递归函数 在haskell中，没有循环，有的只是函数，要完成一些事情，只能使用递归来做，而且 完成得比较好。看下面的求最大值函数： -- function</description>
    </item>
    
    <item>
      <title>C语言实现的矩阵类</title>
      <link>http://zhengyhn.github.io/post/clang/matrix/</link>
      <pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/matrix/</guid>
      <description>随着学习的深入，数学是必不可少的，最近复习到矩阵，于是用我最喜欢的C语言写 了一个矩阵类，使用面向对象的方法，只实现了简单的操作:新建，删除，</description>
    </item>
    
    <item>
      <title>函数中的语法</title>
      <link>http://zhengyhn.github.io/post/haskell/function.org/</link>
      <pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/haskell/function.org/</guid>
      <description>模式匹配(pattern matching) 这里的模式匹配有点像switch&amp;hellip;case&amp;hellip;下面的函数判断传入的参数是不是7 lucky :: (Integral a) =&amp;gt;</description>
    </item>
    
    <item>
      <title>如何成为一个黑客</title>
      <link>http://zhengyhn.github.io/post/how-to-become-a-hacker/</link>
      <pubDate>Mon, 04 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/how-to-become-a-hacker/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;how to become a hacker&amp;rdquo;一书的笔记 @&amp;lt;/font&amp;gt; 什么是一个黑客 有一个社区，里面有共享的文化，有顶级的编程高手，有网</description>
    </item>
    
    <item>
      <title>开幕</title>
      <link>http://zhengyhn.github.io/post/algorithm/prologue/</link>
      <pubDate>Sun, 03 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/algorithm/prologue/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;Algorithms&amp;rdquo;一书的笔记 @&amp;lt;/font&amp;gt; fibonacci 书上给出了另外一种我想不到的解法： #include &amp;lt;stdio.h&amp;gt; #define MAXN 100 int fib[MAXN]; int get_fib(int num); int main(int argc, char *argv[]) { printf(&amp;quot;%d\n&amp;quot;,</description>
    </item>
    
    <item>
      <title>检查产品说明</title>
      <link>http://zhengyhn.github.io/post/test/specification.org/</link>
      <pubDate>Sun, 03 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/test/specification.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;software testing&amp;rdquo;一书的读书笔记 @&amp;lt;/font&amp;gt; 原来在项目经理写好产品说明书，软件测试师就要开始工作，检</description>
    </item>
    
    <item>
      <title>个人的成功——从依赖到独立</title>
      <link>http://zhengyhn.github.io/post/sevenhabbits/personal_success.org/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/sevenhabbits/personal_success.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为《高效能人士的七个习惯》一书的笔记 @&amp;lt;/font&amp;gt; 掌握“选择的自由”——操之在我的力量 人有“选择的自由”，这种自由来自人类特有的四种天赋： 自我意</description>
    </item>
    
    <item>
      <title>人际关系的成功——从独立到互赖</title>
      <link>http://zhengyhn.github.io/post/sevenhabbits/relationship_success.org/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/sevenhabbits/relationship_success.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为《高效能人士的七个习惯》一书的笔记 @&amp;lt;/font&amp;gt; 你不是一座孤岛 开一个感谢账户，存入六种感情存款： 了解别人 注意小节 信守承诺 阐明期望 诚恳正直 勇于道</description>
    </item>
    
    <item>
      <title>软件测试的现状</title>
      <link>http://zhengyhn.github.io/post/test/reality.org/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/test/reality.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;software testing&amp;rdquo;一书的读书笔记 @&amp;lt;/font&amp;gt; 测试公理 不可能完整地测试一个程序 原因有： 可能的输入是巨大</description>
    </item>
    
    <item>
      <title>重新探索自我</title>
      <link>http://zhengyhn.github.io/post/sevenhabbits/review_myself.org/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/sevenhabbits/review_myself.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为《高效能人士的七个习惯》一书的笔记 @&amp;lt;/font&amp;gt; 由内而外全面造就自己 引言 你希望在工作上享有更多自主吗 那么先做个更负责尽职的员工吧 你希望获得信任</description>
    </item>
    
    <item>
      <title>c陷井和缺陷</title>
      <link>http://zhengyhn.github.io/post/clang/c_traps_pitfalls/</link>
      <pubDate>Fri, 01 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/c_traps_pitfalls/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;c traps and pitfalls&amp;rdquo;一书的笔记 @&amp;lt;/font&amp;gt; 词法陷井 看下面的代码： y = x/*p; /* p points to the divisor */ 本意是x除以p指向的变量，</description>
    </item>
    
    <item>
      <title>软件测试读书笔记：软件开发过程</title>
      <link>http://zhengyhn.github.io/post/test/dev_process.org/</link>
      <pubDate>Fri, 01 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/test/dev_process.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;software testing&amp;rdquo;一书的读书笔记 @&amp;lt;/font&amp;gt; 产品的组成部分 用户需求 产品说明书 进度表 设计文档 架构 数据流</description>
    </item>
    
    <item>
      <title>软件测试读书笔记：软件测试背景</title>
      <link>http://zhengyhn.github.io/post/test/stbg.org/</link>
      <pubDate>Fri, 01 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/test/stbg.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;software testing&amp;rdquo;一书的读书笔记 @&amp;lt;/font&amp;gt; 什么是bug 当下面5种情况中的一种出现时，说明有bug了</description>
    </item>
    
    <item>
      <title>linux系统编程</title>
      <link>http://zhengyhn.github.io/post/clang/linux.org/</link>
      <pubDate>Wed, 27 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/linux.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;linux c编程一站式学习&amp;rdquo;一书的笔记 @&amp;lt;/font&amp;gt; 文件与I/O 再来一个hello world 我也来写一段汇编的hello world .data</description>
    </item>
    
    <item>
      <title>gtk, widget</title>
      <link>http://zhengyhn.github.io/post/gtk/base/</link>
      <pubDate>Fri, 22 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/gtk/base/</guid>
      <description>看下面一个装载widget的程序： #include &amp;lt;gtk/gtk.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; //macros #define BORDER_WIDTH 10 //global variables GtkWidget *win; GtkWidget *btn; GtkWidget *top_box; GtkWidget *separator; GtkWidget *bottom_box; GtkWidget *label; GtkWidget *quitbox; //functions gint delete_event(GtkWidget *widget, GdkEvent *event, gpointer data); void make_box(GtkWidget *parent, gboolean homogeneous, gint spacing, gboolean expand, gboolean fill, guint padding); void make_btn(GtkWidget *box, GtkWidget</description>
    </item>
    
    <item>
      <title>gtk, introduction</title>
      <link>http://zhengyhn.github.io/post/gtk/intro/</link>
      <pubDate>Thu, 21 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/gtk/intro/</guid>
      <description>简介 GTK(GIMP ToolKit)，是用于构建GUI的库来的。取这个名字，是因为GTK是用于开发GIMP (GNU image manipulation program)的，现在也用来开发GNOM</description>
    </item>
    
    <item>
      <title>types and typeclasses</title>
      <link>http://zhengyhn.github.io/post/haskell/types.org/</link>
      <pubDate>Mon, 18 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/haskell/types.org/</guid>
      <description>概述 haskell有类型推理机制，如果我们写一个数字，我们不用告诉编译器它是一个数字， 编译器能够推理出它是一个数字。 使用:t命令可以查看一个</description>
    </item>
    
    <item>
      <title>Linux c编程一站式学习笔记：C语言本质</title>
      <link>http://zhengyhn.github.io/post/clang/real.org/</link>
      <pubDate>Sat, 16 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/real.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;linux c编程一站式学习&amp;rdquo;一书的笔记 @&amp;lt;/font&amp;gt; 计算机中数的表示 二进制数表示法 LSB称为第0位而不是第1位，所以</description>
    </item>
    
    <item>
      <title>introduction</title>
      <link>http://zhengyhn.github.io/post/haskell/intro.org/</link>
      <pubDate>Sat, 16 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/haskell/intro.org/</guid>
      <description>what is haskell haskell是一种纯粹的函数式编程语言 没有副作用 一种懒惰的语言，只有当要显示结果的时候才执行函数 静态类型化，不用指定类型，编译器能自</description>
    </item>
    
    <item>
      <title>Linux c编程一站式学习笔记：C语言基础</title>
      <link>http://zhengyhn.github.io/post/clang/overview.org/</link>
      <pubDate>Wed, 13 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://zhengyhn.github.io/post/clang/overview.org/</guid>
      <description>@&amp;lt;font color=&amp;ldquo;red&amp;rdquo;&amp;gt; 本文为&amp;rdquo;linux c编程一站式学习&amp;rdquo;一书的笔记 @&amp;lt;/font&amp;gt; 程序和编程语言 平台这个词有很多说法，可以指计算机体系结构，也可以</description>
    </item>
    
  </channel>
</rss>